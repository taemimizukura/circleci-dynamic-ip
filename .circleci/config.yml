version: 2.1
orbs:
  aws-cli: circleci/aws-cli@5.1.1
  ruby: circleci/ruby@2.2.1
  ansible-playbook: orbss/ansible-playbook@0.0.5
  aws-cloudformation: orbss/aws-cloudformation@0.1.6
  python: circleci/python@2.0.3

jobs:
  cfn-lint:
    executor: python/default
    steps:
      - checkout
      - run: pip install cfn-lint
      - run:
          name: Run cfn-lint for CloudFormation
          command: cfn-lint -i W3002 -t cloudformation/*.yml
  execute-cloudformation:
    executor: aws-cli/default
    steps:
      - checkout
      - run:
          name: Install required utilities
          command: yum install -y tar gzip
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:
          name: Deploy to AWS from templates
          command: |
            aws cloudformation deploy --template-file cloudformation/1_VPC_Network_target.yml --stack-name 'VPC-target' && \
            aws cloudformation deploy --template-file cloudformation/2_EC2_target.yml --stack-name 'EC2-target' --parameter-overrides MyKeyPair=$MY_KEY_PAIR --capabilities CAPABILITY_NAMED_IAM && \
            aws cloudformation deploy --template-file cloudformation/3_RDS_S3_ALB.yml --stack-name 'ALB-RDS-S3'
      - run:
          name: Get ELB DNS_NAME from CloudFormation
          command: |
            DNS_NAME=$(aws cloudformation describe-stacks \
              --stack-name "ALB-RDS-S3" \
              --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNS'].OutputValue" \
              --output text \
              --region ap-northeast-1)
            echo "${DNS_NAME}" > dns_name.txt
      - run:
            name: Get EC2 Instance Public IP from CloudFormation
            command: |
              INSTANCE_PUBLIC_IP=$(aws cloudformation describe-stacks \
                --stack-name "EC2-target" \
                --query "Stacks[0].Outputs[?OutputKey=='InstancePublicIp'].OutputValue" \
                --output text \
                --region ap-northeast-1)
              echo "${INSTANCE_PUBLIC_IP}" > instance_public_ip.txt
      - persist_to_workspace:
          root: .
          paths:
            - dns_name.txt
            - instance_public_ip.txt
  execute-ansible:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load DNS_NAME and INSTANCE_PUBLIC_IP from workspace
          command: |
            DNS_NAME=$(cat /tmp/workspace/dns_name.txt)
            INSTANCE_PUBLIC_IP=$(cat /tmp/workspace/instance_public_ip.txt)
            echo "export DNS_NAME=${DNS_NAME}" >> $BASH_ENV
            echo "export INSTANCE_PUBLIC_IP=${INSTANCE_PUBLIC_IP}" >> $BASH_ENV
      - run:
          name: Remove old entry and add new entry
          command: |
            ssh-keygen -R ${INSTANCE_PUBLIC_IP} -f ~/.ssh/known_hosts || true
            ssh-keyscan ${INSTANCE_PUBLIC_IP} >> ~/.ssh/known_hosts
      - add_ssh_keys:
          fingerprints:
            - $FINGER_PRINT
      - run:
          name: Install Ansible
          command: pip install ansible
      - run:
          name: Execute Ansible Playbook
          command: |
            ansible-playbook -i ansible/inventory ansible/playbook.yml --extra-vars "alb_dns=${DNS_NAME} instance_ip=${INSTANCE_PUBLIC_IP}"
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - .env
  execute-serverspec:
    executor: ruby/default
    steps:
      - checkout
      - ruby/install:
          version: 3.2.3
      - ruby/install-deps:
          app-dir: serverspec
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: load environment variables
          command: |
            source /tmp/workspace/.env
      - run:
          name: Execute serverspec
          command: |
            cd serverspec
            echo "Using IP: ${INSTANCE_PUBLIC_IP}"
            TARGET_HOST=${INSTANCE_PUBLIC_IP} bundle exec rspec
workflows:
  version: 2
  lec13-workflow:
    jobs:
      - cfn-lint
      - execute-cloudformation:
          requires:
            - cfn-lint
      - execute-ansible:
          requires:
            - execute-cloudformation
      - execute-serverspec:
          requires:
            - execute-ansible
